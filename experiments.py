import torch
from pathlib import Path

exp_0 = dict(write_access=True,
             model_name='unet',
             pretrained_on=None,
             continue_training=False,
             continue_model_path=None,
             continue_from_epoch=0,
             initialize_weights=True,
             freeze_encoder=False,
             num_epochs=200,
             in_channels=3,
             num_categories=2,
             filter_sizes=(32, 64, 128, 256, 512),
             deep_supervision=True,
             dataloader_path=Path('tmp/Dataloader_SN1_Buildings.pkl'),
             device=torch.device('cuda' if torch.cuda.is_available() else 'cpu'),
             learning_rate_dict=dict(static_lr=3e-4, use_cyclic_learning_rate=True, base_lr=3e-3, max_lr=1e-2),
             save_model_every_epoch=True)

exp_1 = dict(write_access=True,
             model_name='attention_unet',
             pretrained_on=None,
             continue_training=False,
             continue_model_path=None,
             continue_from_epoch=0,
             initialize_weights=True,
             freeze_encoder=False,
             num_epochs=200,
             in_channels=3,
             num_categories=2,
             filter_sizes=(32, 64, 128, 256, 512),
             deep_supervision=True,
             dataloader_path=Path('tmp/Dataloader_SN1_Buildings.pkl'),
             device=torch.device('cuda' if torch.cuda.is_available() else 'cpu'),
             learning_rate_dict=dict(static_lr=3e-4, use_cyclic_learning_rate=True, base_lr=3e-3, max_lr=1e-2),
             save_model_every_epoch=True)

exp_2 = dict(write_access=True,
             model_name='cbam_unet',
             pretrained_on=None,
             continue_training=False,
             continue_model_path=None,
             continue_from_epoch=0,
             initialize_weights=True,
             freeze_encoder=False,
             num_epochs=200,
             in_channels=3,
             num_categories=2,
             filter_sizes=(32, 64, 128, 256, 512),
             deep_supervision=True,
             dataloader_path=Path('tmp/Dataloader_SN1_Buildings.pkl'),
             device=torch.device('cuda' if torch.cuda.is_available() else 'cpu'),
             learning_rate_dict=dict(static_lr=3e-4, use_cyclic_learning_rate=True, base_lr=3e-3, max_lr=1e-2),
             save_model_every_epoch=True)

exp_3 = dict(write_access=True,
             model_name='residualattention_unet',
             pretrained_on=None,
             continue_training=False,
             continue_model_path=None,
             continue_from_epoch=0,
             initialize_weights=True,
             freeze_encoder=False,
             num_epochs=200,
             in_channels=3,
             num_categories=2,
             filter_sizes=(32, 64, 128, 256, 512),
             deep_supervision=True,
             dataloader_path=Path('tmp/Dataloader_SN1_Buildings.pkl'),
             device=torch.device('cuda' if torch.cuda.is_available() else 'cpu'),
             learning_rate_dict=dict(static_lr=3e-4, use_cyclic_learning_rate=True, base_lr=2e-3, max_lr=6e-3),
             save_model_every_epoch=True)

exp_4 = dict(write_access=True,
             model_name='scag_unet',
             pretrained_on=None,
             continue_training=False,
             continue_model_path=None,
             continue_from_epoch=0,
             initialize_weights=True,
             freeze_encoder=False,
             num_epochs=200,
             in_channels=3,
             num_categories=2,
             filter_sizes=(32, 64, 128, 256, 512),
             deep_supervision=True,
             dataloader_path=Path('tmp/Dataloader_SN1_Buildings.pkl'),
             device=torch.device('cuda' if torch.cuda.is_available() else 'cpu'),
             learning_rate_dict=dict(static_lr=3e-4, use_cyclic_learning_rate=True, base_lr=3e-3, max_lr=1e-2),
             save_model_every_epoch=True)

exp_5 = dict(write_access=True,
             model_name='densenet121_unet',
             pretrained_on='Imagenet',
             continue_training=False,
             continue_model_path=None,
             continue_from_epoch=0,
             initialize_weights=True,
             freeze_encoder=False,
             num_epochs=60,
             in_channels=3,
             num_categories=2,
             deep_supervision=True,
             dataloader_path=Path('tmp/Dataloader_SN1_Buildings.pkl'),
             device=torch.device('cuda' if torch.cuda.is_available() else 'cpu'),
             learning_rate_dict=dict(static_lr=3e-4, use_cyclic_learning_rate=True, base_lr=1e-2, max_lr=3e-2),
             save_model_every_epoch=True)

exp_6 = dict(write_access=True,
             model_name='mobilenetv2_unet',
             pretrained_on='Imagenet',
             continue_training=False,
             continue_model_path=None,
             continue_from_epoch=0,
             initialize_weights=True,
             freeze_encoder=False,
             num_epochs=60,
             in_channels=3,
             num_categories=2,
             deep_supervision=True,
             dataloader_path=Path('tmp/Dataloader_SN1_Buildings.pkl'),
             device=torch.device('cuda' if torch.cuda.is_available() else 'cpu'),
             learning_rate_dict=dict(static_lr=3e-4, use_cyclic_learning_rate=True, base_lr=2e-2, max_lr=6e-2),
             save_model_every_epoch=True)

exp_7 = dict(write_access=True,
             model_name='resnet34_unet',
             pretrained_on='Imagenet',
             continue_training=False,
             continue_model_path=None,
             continue_from_epoch=0,
             initialize_weights=True,
             freeze_encoder=False,
             num_epochs=60,
             in_channels=3,
             num_categories=2,
             deep_supervision=True,
             dataloader_path=Path('tmp/Dataloader_SN1_Buildings.pkl'),
             device=torch.device('cuda' if torch.cuda.is_available() else 'cpu'),
             learning_rate_dict=dict(static_lr=3e-4, use_cyclic_learning_rate=True, base_lr=1e-2, max_lr=3e-2),
             save_model_every_epoch=True)

exp_8 = dict(write_access=True,
             model_name='vgg11_unet',
             pretrained_on='Imagenet',
             continue_training=False,
             continue_model_path=None,
             continue_from_epoch=0,
             initialize_weights=True,
             freeze_encoder=False,
             num_epochs=60,
             in_channels=3,
             num_categories=2,
             deep_supervision=True,
             dataloader_path=Path('tmp/Dataloader_SN1_Buildings.pkl'),
             device=torch.device('cuda' if torch.cuda.is_available() else 'cpu'),
             learning_rate_dict=dict(static_lr=3e-4, use_cyclic_learning_rate=True, base_lr=3e-3, max_lr=1e-2),
             save_model_every_epoch=True)
